services:
  questdb:
    image: questdb/questdb:8.3.2
    container_name: algo-questdb
    restart: unless-stopped
    ports:
      - "9000:9000"
      - "9009:9009"
    volumes:
      - questdb_data:/root/.questdb
    environment:
      - QDB_TELEMETRY_ENABLED=false
      - JAVA_OPTS=-Xms12g -Xmx20g -XX:+UseG1GC -XX:MaxGCPauseMillis=200 -XX:+UseStringDeduplication -XX:+AlwaysPreTouch
      - QDB_CAIRO_O3_MAX_LAG=600000
      - QDB_CAIRO_COMMIT_LAG=1000
      - QDB_CAIRO_PAGE_FRAME_COUNT=1024
      - QDB_CAIRO_WRITER_MEMORY_LIMIT=40G
      - QDB_CAIRO_MAX_UNCOMMITTED_ROWS=1000000
      - QDB_SHARED_WORKER_COUNT=8
      - QDB_CAIRO_SQL_COPY_BUFFER_SIZE=8M
      - QDB_CAIRO_WRITER_DATA_APPEND_PAGE_SIZE=16M
      - QDB_HTTP_MIN_ENABLED=false
    networks:
      - algo-net
    healthcheck:
      test: ["CMD-SHELL", "wget -q --spider http://localhost:9000/status || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 24G
          cpus: '10'

  redis:
    image: redis:7-alpine
    container_name: algo-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --maxmemory 4gb --maxmemory-policy allkeys-lru
    networks:
      - algo-net
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: '2'

  data-collector:
    build:
      context: .
      dockerfile: ./services/data-collector/Dockerfile
    container_name: algo-data-collector
    restart: unless-stopped
    depends_on:
      questdb:
        condition: service_started
      redis:
        condition: service_healthy
    volumes:
      - ./config:/app/config:ro
    environment:
      - PYTHONUNBUFFERED=1
      - TZ=UTC
    networks:
      - algo-net
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '2'

  feature-engine:
    build:
      context: .
      dockerfile: services/feature-engine/Dockerfile
    container_name: algo-feature-engine
    restart: unless-stopped
    depends_on:
      questdb:
        condition: service_started
      redis:
        condition: service_healthy
      data-collector:
        condition: service_started
    volumes:
      - ./config:/app/config:ro
    environment:
      - PYTHONUNBUFFERED=1
      - TZ=UTC
      - OMP_NUM_THREADS=8
      - NUMBA_NUM_THREADS=8
    networks:
      - algo-net
    deploy:
      resources:
        limits:
          memory: 12G
          cpus: '12'

  prometheus:
    image: prom/prometheus:latest
    container_name: algo-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=30d'
    networks:
      - algo-net

  grafana:
    image: grafana/grafana:latest
    container_name: algo-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_INSTALL_PLUGINS=redis-datasource
    networks:
      - algo-net

networks:
  algo-net:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  questdb_data:
  redis_data:
  prometheus_data:
  grafana_data: